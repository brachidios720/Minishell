//ECHO :
//----
T	echo "hello" 
R	hello
M   //ok

T	echo -n "hello"
R	hello
M   //ok

T	echo "hello" "world"
R	hello world
M   //no

T	echo $
R	$
M   //no 

T	echo -nn
R	(rien)
M   //ok

T	echo ---n
R	---n
M	//ok

T	echo -n $
R	$prompt
R	//no

T	echo $USER$TESTNOTFOUND$HOME$WTF$PWD
R	spagliar/home/spagliar/home/spagliar
M	//no

T	echo $/ $/
R	$/ $/
M	//no

T	echo $T$E$S$L$test
R	
M	//ok

T	echo $?+$??
R	0+0
M	0 // no

T	echo $USER
R	......
M   //ok

//REDIRECTION :
//-------------
T   	echo "hello" < test1.txt
R   	hello
M	    //no

T	echo "hello" > test1.txt
R	
M	//no

T	echo "hello" >> test1.txt
R	laisse les elements et ajoute les nouveaux elements dans test1.txt //"hello" >> test1.txt
M	"hello" >> test1.txt

C	 ls > output.txt
R	//cette fonction redirigerait la sortie de la commande ls vers le fichier output.txt au lieu de l'afficher sur l'écran.
// $ :
//----
. //mess : Erreur ouverture fichier d'entrée: Bad address
    spagliar

C   echo $?                          //ok affiche le code retour de la derniere commande
R	Affiche le code de retour de la dernière commande. //mes : Erreur ouverture fichier d'entrée: Bad address
    0

C	echo $NONEXISTANT               //ok chaine vide + code de retour et mess d erreur
R	Si la variable d'environnement n'existe pas, afficher une chaîne vide ou ignorer cet argument.

//HEREDOC
//-------
C	ls | cat << END	//on utlise les fichiers listes par ls et on redirige ds une autres commande
Ajout	I HATE YOU //on ajoute le texte
Ajout	END //on ajoute le delimiteur
Affiche:I HATE YOU
//le fait de mettre un pipe permet de jouer avec les commandes
	
C	 cat < input.txt,
R	//la fonction redirigerait l'entrée du fichier input.txt pour que cat lise ce fichier au lieu de lire les entrées du clavier.
C	echo "hello" >> log.txt
R	//la sortie serait ajoutée à la fin du fichier log.txt sans en effacer le contenu existant.
//export
//------
/*
* check exit code
* check files perm
* test with tab and/or space and/or enter and/or "" and/or " "
* export ___TEST=123
* export HELLO42=T=""
* export T=e E=c S=h L=o test="hey there"
* <<a<<"b"<<'c' cat -e|cat -e
* <a<"b"<'c' cat -e|cat -e
* ls|cat Makefile|cat<<'asd'>out
* ls|cat Makefile|cat<<"asd">out
* echo "cat lol.c | cat > lol.c"
* /bin/cat file | /bin/grep bla | more
* <Makefile cat -e| echo hello|cat -e
* echo hellooo>out|<Makefile cat -e|cat -e>out1>out2
* pwd|cat -e
* <Makefile env|cat -e
* <no_existing|<Makefile cat -e|cat -e
* <Makefile cat -e|<signal.c cat -e >out|wc
* <no_existing|<no_existing2
* exit|exit
* cat >outfile -e<Makefile
* cat -e<<end|cat -e|wc -l>out1
* export USER+=hello
* export salut coucou = bonsoir="hey" cmd="echo salut"
*/